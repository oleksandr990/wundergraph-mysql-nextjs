// Code generated by wunderctl. DO NOT EDIT.

import type { AddTodoResponse, AddTodoInput, AddTodoResponseData, TodosResponse, TodosResponseData } from "./models";
import { createContext } from "react";
import {
	QueryArgsWithInput,
	SubscriptionArgs,
	SubscriptionArgsWithInput,
	hooks,
	WunderGraphContextProperties,
	Client,
} from "@wundergraph/nextjs";

export type Role = "admin" | "user";

export enum S3Provider {
	"minio" = "minio",
}

const defaultWunderGraphContextProperties: WunderGraphContextProperties<Role> = {
	ssrCache: {},
	client: null,
	clientConfig: {
		applicationHash: "795c1a69",
		applicationPath: "api/main",
		baseURL: "http://localhost:9991",
		sdkVersion: "0.96.1",
		authenticationEnabled: false,
	},
	user: null,
	setUser: (value) => {},
	isWindowFocused: "pristine",
	setIsWindowFocused: (value) => {},
	refetchMountedOperations: 0,
	setRefetchMountedOperations: (value) => {},
};

export const WunderGraphContext = createContext<WunderGraphContextProperties<Role>>(
	defaultWunderGraphContextProperties
);

export const withWunderGraph = hooks.withWunderGraphContextWrapper(
	WunderGraphContext,
	defaultWunderGraphContextProperties
);

export const useWunderGraph = hooks.useWunderGraph<Role, "", S3Provider>(WunderGraphContext);

export const useQuery = {
	Todos: hooks.useQueryWithoutInput<TodosResponseData, Role>(WunderGraphContext, {
		operationName: "Todos",
		requiresAuthentication: false,
	}),
};

export const useMutation = {
	AddTodo: () =>
		hooks.useMutationWithInput<AddTodoInput, AddTodoResponseData, Role>(WunderGraphContext, {
			operationName: "AddTodo",
			requiresAuthentication: false,
		}),
};

export const useSubscription = {};

export const useLiveQuery = {
	Todos: (args?: SubscriptionArgs) =>
		hooks.useSubscriptionWithoutInput<TodosResponseData, Role>(WunderGraphContext, {
			operationName: "Todos",
			isLiveQuery: true,
			requiresAuthentication: false,
		})(args),
};
